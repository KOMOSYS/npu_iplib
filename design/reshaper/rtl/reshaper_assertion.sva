module reshaper_assertion #(parameter AW=16)(
    input clk,
    input reset_n,
    input init_pulse,
    input [AW-1:0] rreq_num,
    input [AW-1:0] wreq_num,
    input raddr_vld,
    input rdata_vld,
    input wdata_vld,
    input finish
);

/** Sequence to count request num
* Until rising edge of finish, request valid count must reach request num
*/
sequence req_num_check_sequence(logic [AW-1:0] req_num, logic req_vld);
    logic [AW-1:0] cnt_max;
    logic [AW-1:0] cnt;
    (1, cnt_max=req_num, cnt=0) ##0 first_match((req_vld, cnt+=1)[=1:$] ##0 finish) ##0 (cnt == cnt_max);
endsequence: req_num_check_sequence

property req_num_checker(logic [AW-1:0] req_num, valid_sig);
    @(posedge clk) disable iff(~reset_n) init_pulse |-> req_num_check_sequence(req_num, valid_sig);
endproperty: req_num_checker

arcnt_chk:
assert property(req_num_checker(rreq_num, raddr_vld)) else $fatal("Read Address Count Check Fail");

rcnt_chk:
assert property(req_num_checker(rreq_num, rdata_vld)) else $fatal("Read Data Count Check Fail");

wcnt_chk:
assert property(req_num_checker(wreq_num, wdata_vld)) else $fatal("Write Data Count Check Fail");

endmodule: reshaper_assertion